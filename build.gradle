plugins {
  id "idea"
  id "com.github.mxenabled.vogue" version "1.0.1"
  id "com.github.mxenabled.coppuccino" version "3.1.3" apply false
  id "com.github.mxenabled.hush" version "2.3.1" apply false
  id "io.freefair.lombok" version "6.5.1" apply false
}

version "1.4.0" // x-release-please-version

def platformProject = "platform"

allprojects {
  if (it.name != platformProject) {
    apply plugin: "java"
  }

  group "com.github.mxenabled.path-mdx-model"
  description "Path MDX Model"
  version rootProject.version
  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://jitpack.io" }
  }

  ext {
    pathSDKVersion = "[1.0,2.0["
  }
}

subprojects {
  if (it.name != platformProject) {
    apply plugin: "java-library"
    apply plugin: "maven-publish"
    apply plugin: "groovy"
    apply plugin: "com.github.mxenabled.hush"
    apply plugin: "com.github.mxenabled.coppuccino"
    apply plugin: "com.github.mxenabled.vogue"
    apply plugin: "io.freefair.lombok"

    dependencies {
      api platform("com.mx.path-core:platform:${project.ext.pathSDKVersion}")
      testImplementation "org.mockito:mockito-inline:[4.0,5.0["
      testImplementation "org.spockframework:spock-core:[2.0,3.0["
      testImplementation "org.junit.jupiter:junit-jupiter-api:[5.0,6.0["
    }

    test { useJUnitPlatform() }

    compileJava { options.compilerArgs << "-parameters" }

    sourceSets {
      test {
        groovy { srcDirs "src/test/groovy" }
        java { srcDirs "src/test/java" }
      }
    }

    javadoc {
      classpath = configurations.compileClasspath
      options {
        setMemberLevel JavadocMemberLevel.PUBLIC
        setAuthor true
      }
    }

    coppuccino {
      rootDir = "${projectDir}/"
    }

    vogue {
      dependencyUpdatesOutputDir = "${projectDir}/build/dependencyUpdates"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
      classifier = "sources"
      from sourceSets.main.allSource
    }

    task packageJavadoc(type: Jar) {
      classifier = 'javadoc'
      from javadoc
    }

    artifacts {
      archives sourcesJar
      archives jar
      archives packageJavadoc
    }

    publishing {
      publications {
        mavenJava(MavenPublication) {
          from components.java
          artifact sourcesJar
          artifact packageJavadoc
        }
      }
    }
  }
}

task spotlessApply {
  subprojects.each {
    if (it.name != platformProject) {
      it.afterEvaluate {
        def spotlessApplyTask = it.tasks.findByName("spotlessApply")
        dependsOn(spotlessApplyTask)
      }
    }
  }
}

task dependencyCheckAnalyze {
  subprojects.each {
    if (it.name != platformProject) {
      it.afterEvaluate {
        def dependencyCheckAnalyzeTask = it.tasks.findByName("dependencyCheckAnalyze")
        dependsOn(dependencyCheckAnalyzeTask)
      }
    }
  }
}

task subdependencies {
  subprojects.each {
    if (it.name != platformProject) {
      it.afterEvaluate {
        def dependenciesTask = it.tasks.findByName("dependencies")
        dependsOn(dependenciesTask)
      }
    }
  }
}

project.tasks.getByPath("dependencies").finalizedBy("subdependencies")
